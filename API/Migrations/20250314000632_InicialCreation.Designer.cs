// <auto-generated />
using System;
using API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250314000632_InicialCreation")]
    partial class InicialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("API.Entities.TB_CATEGORIA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CATEGORIAS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Musculação"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Cardio"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Flexibilidade"
                        });
                });

            modelBuilder.Entity("API.Entities.TB_Exercicios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exercicio")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("Repeticoes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Serie")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tempo")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Exercicio");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EXERCICIOS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            DataCriacao = new DateTime(2025, 3, 13, 21, 6, 31, 656, DateTimeKind.Local).AddTicks(3461),
                            Exercicio = "Supino",
                            Repeticoes = 12,
                            Serie = 4,
                            Tempo = 0,
                            UsuarioId = 1L
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 2,
                            DataCriacao = new DateTime(2025, 3, 13, 21, 6, 31, 656, DateTimeKind.Local).AddTicks(4034),
                            Exercicio = "Corrida",
                            Repeticoes = 0,
                            Serie = 1,
                            Tempo = 30,
                            UsuarioId = 1L
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 3,
                            DataCriacao = new DateTime(2025, 3, 13, 21, 6, 31, 656, DateTimeKind.Local).AddTicks(4051),
                            Exercicio = "Alongamento",
                            Repeticoes = 10,
                            Serie = 2,
                            Tempo = 15,
                            UsuarioId = 2L
                        });
                });

            modelBuilder.Entity("API.Entities.TB_USUARIO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("USUARIO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2025, 3, 13, 21, 6, 31, 653, DateTimeKind.Local).AddTicks(7538),
                            Nome = "Admin",
                            Senha = "Admin@123",
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTime(2025, 3, 13, 21, 6, 31, 653, DateTimeKind.Local).AddTicks(8256),
                            Nome = "João",
                            Senha = "Joao@123",
                            Status = 1
                        });
                });

            modelBuilder.Entity("API.Entities.TB_Exercicios", b =>
                {
                    b.HasOne("API.Entities.TB_CATEGORIA", "Categoria")
                        .WithMany("Exercicios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Entities.TB_USUARIO", "Usuario")
                        .WithMany("Exercicios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
